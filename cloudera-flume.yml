application:
  configuration:
    input.identity: "root"
    input.cookbooks_url: "https://dl.dropboxusercontent.com/u/250836/hadoop.tar.gz"
    input.repository_url: "http://archive.cloudera.com"
    input.cloudera_hadoop_version: "5.1.3"
  interfaces:
    input:
      identity: "bind(cloudera-flume#input.identity)"
      cookbooks_url: "bind(cloudera-flume#input.cookbooks_url)"
      repository_url: "bind(cloudera-flume#input.repository_url)"
      cloudera_hadoop_version: "bind(cloudera-flume#input.cloudera_hadoop_version)"
    vms:
      Node_Manager: "bind(cloudera-flume#vms.Node_Manager)"
      Node_Manager_DNS: "bind(cloudera-flume#vms.Node_Manager_DNS)"
      Node_Master: "bind(cloudera-flume#vms.Node_Master)"
      Node_Master_DNS: "bind(cloudera-flume#vms.Node_Master_DNS)"
      DataNodes: "bind(cloudera-flume#vms.DataNodes)"
      DataNodesDNS: "bind(cloudera-flume#vms.DataNodesDNS)"
    cloudera-sqoop:
      Sqoop_Master: "bind(cloudera-flume#cloudera-sqoop.Sqoop_Master)"
    cloudera-flume:
      Flume_Status: "bind(cloudera-flume#result.Flume_Status)"
  components:
    cloudera-flume:
      type: workflow.Instance
      interfaces:
        input:
          identity: configuration(string)
          repository_url: configuration(string)
          cookbooks_url: configuration(string)
          cloudera_hadoop_version: configuration(string)
        vms:
          Node_Manager: consume-signal(list<string>)
          Node_Manager_DNS: consume-signal(string)
          Node_Master: consume-signal(list<string>)
          Node_Master_DNS: consume-signal(string)
          DataNodes: consume-signal(list<string>)
          DataNodesDNS: consume-signal(list<string>)
        cloudera-sqoop:
          Sqoop_Master: consume-signal(list<string>)
        result:
          Flume_Status: publish-signal(string)
      required: [vms, cloudera-sqoop]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - provision-manager-node:
                  action: provisionVms
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: "manager"
                    hardwareId: ""
                    vmIdentity: "{$.identity}"
                    staticIps: "{$.props.vms.Node_Manager}"
                  output:
                    managerIp: ips
              - provision-datanode:
                  action: provisionVms
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: "datanode"
                    hardwareId: ""
                    vmIdentity: "{$.identity}"
                    staticIps: "{$.props.vms.DataNodes}"
                  output:
                    datanodeIps: ips
              - provision-master-node:
                  action: provisionVms
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: "master"
                    hardwareId: ""
                    vmIdentity: "{$.identity}"
                    staticIps: "{$.props.vms.Node_Master}"
                  output:
                    masterIp: ips
              - install-flume-pkg:
                  action: chefrun
                  phase: install-flume-pkg
                  precedingPhases: [ provision-manager-node, provision-datanode, provision-master-node ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "master", "manager", "datanode" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::flume_pkg]" ]
                    jattrs:
                      java:
                        java_home: "/usr/java/jdk6"
                      cloudera:
                        hadoop:
                          version: "{$.cloudera_hadoop_version}"
                        repository_url: "{$.repository_url}"
            return:
              - Flume_Status:
                  value: "Installed"