application:
  configuration:
    input.identity: "root"
    input.cookbooks_url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-hadoop-cookbooks-stable-v5.tar.gz"
    input.repository_url: "http://archive.cloudera.com"
    input.cloudera_manager_version: "5.1.3"
    input.cloudera_hadoop_version: "5.1.3"
    input.metastore_root_password: "hive"
  interfaces:
    input:
      identity: "bind(cloudera-hive#input.identity)"
      cookbooks_url: "bind(cloudera-hive#input.cookbooks_url)"
      repository_url: "bind(cloudera-hive#input.repository_url)"
      cloudera_manager_version: "bind(cloudera-hive#input.cloudera_manager_version)"
      cloudera_hadoop_version: "bind(cloudera-hive#input.cloudera_hadoop_version)"
      metastore_root_password: "bind(cloudera-hive#input.metastore_root_password)"
    vms:
      Node_Manager: "bind(cloudera-hive#vms.Node_Manager)"
      Node_Manager_DNS: "bind(cloudera-hive#vms.Node_Manager_DNS)"
      Node_Master: "bind(cloudera-hive#vms.Node_Master)"
      Node_Master_DNS: "bind(cloudera-hive#vms.Node_Master_DNS)"
      DataNodes: "bind(cloudera-hive#vms.DataNodes)"
      DataNodesDNS: "bind(cloudera-hive#vms.DataNodesDNS)"
    cloudera-hadoop:
      NameNode: "bind(cloudera-hive#cloudera-hadoop.NameNode)"
      Primary_NameNode: "bind(cloudera-hive#cloudera-hadoop.Primary_NameNode)"
      Secondary_NameNode: "bind(cloudera-hive#cloudera-hadoop.Secondary_NameNode)"
      Hbase_Master: "bind(cloudera-hive#cloudera-hadoop.Hbase_Master)"
      Hbase_MasterDns: "bind(cloudera-hive#cloudera-hadoop.Hbase_MasterDns)"
      JobTracker: "bind(cloudera-hive#cloudera-hadoop.JobTracker)"
      cloudera_hdfsWebui: "bind(cloudera-hive#cloudera-hadoop.cloudera_hdfsWebui)"
      cloudera_jobtrackerWebui: "bind(cloudera-hive#cloudera-hadoop.cloudera_jobtrackerWebui)"
      cloudera_hbaseWebui: "bind(cloudera-hive#cloudera-hadoop.cloudera_hbaseWebui)"
    cloudera-hive:
      Hive_Server: "bind(cloudera-hive#result.Hive_Server)"
      Hive_Metastore: "bind(cloudera-hive#result.Hive_Metastore)"
  components:
    cloudera-hive:
      type: workflow.Instance
      interfaces:
        input:
          identity: configuration(string)
          repository_url: configuration(string)
          cookbooks_url: configuration(string)
          cloudera_hadoop_version: configuration(string)
          cloudera_manager_version: configuration(string)
          metastore_root_password: configuration(string)
        vms:
          Node_Manager: consume-signal(list<string>)
          Node_Manager_DNS: consume-signal(string)
          Node_Master: consume-signal(list<string>)
          Node_Master_DNS: consume-signal(string)
          DataNodes: consume-signal(list<string>)
          DataNodesDNS: consume-signal(list<string>)
        cloudera-hadoop:
          NameNode: consume-signal(list<string>)
          Primary_NameNode: consume-signal(list<string>)
          Secondary_NameNode: consume-signal(list<string>)
          Hbase_Master: consume-signal(list<string>)
          Hbase_MasterDns: consume-signal(string)
          JobTracker: consume-signal(list<string>)
          cloudera_hdfsWebui: consume-signal(list<string>)
          cloudera_jobtrackerWebui: consume-signal(list<string>)
          cloudera_hbaseWebui: consume-signal(list<string>)
        result:
          Hive_Server: publish-signal(list<string>)
          Hive_Metastore: publish-signal(list<string>)
      required: [vms, cloudera-hadoop]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  output:
                    props: result
              - provision-manager-node:
                  action: provisionVms
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: "manager"
                    hardwareId: ""
                    vmIdentity: "{$.identity}"
                    staticIps: "{$.props.vms.Node_Manager}"
                  output:
                    managerIp: ips
              - provision-datanode:
                  action: provisionVms
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: "datanode"
                    hardwareId: ""
                    vmIdentity: "{$.identity}"
                    staticIps: "{$.props.vms.DataNodes}"
                  output:
                    datanodeIps: ips
              - provision-master-node:
                  action: provisionVms
                  precedingPhases: [ get-env-props ]
                  parameters:
                    roleName: "master"
                    hardwareId: ""
                    vmIdentity: "{$.identity}"
                    staticIps: "{$.props.vms.Node_Master}"
                  output:
                    masterIp: ips
              - packages-hive:
                  action: chefrun
                  precedingPhases: [ provision-manager-node, provision-datanode, provision-master-node ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "manager" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::hive_rc]" ]
                    retryCount: 2
                    jattrs:
                      java:
                        java_home: "/usr/java/jdk6"
                      cloudera:
                        master:
                          host: "{$.props.vms.Node_Master_DNS}"
                        manager:
                          host: "{$.props.vms.Node_Manager_DNS}"
                          version: "{$.cloudera_manager_version}"
                        datanodes:
                          hosts: "{$.props.vms.DataNodesDNS}"
                        hadoop:
                          version: "{$.cloudera_hadoop_version}"
                        repository_url: "{$.repository_url}"
                      mysql:
                        server_debian_password: "{$.metastore_root_password}"
                        server_root_password: "{$.metastore_root_password}"
                        server_repl_password: "{$.metastore_root_password}"
                        bind_address: "127.0.0.1"

              - packages-client-hive:
                  action: chefrun
                  precedingPhases: [ packages-hive ]
                  parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "master", "datanode" ]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[cloudera::hive_client_pkg]" ]
                      retryCount: 2
                      jattrs:
                        java:
                          java_home: "/usr/java/jdk6"
                        cloudera:
                          master:
                            host: "{$.props.vms.Node_Master_DNS}"
                          manager:
                            host: "{$.props.vms.Node_Manager_DNS}"
                            version: "{$.cloudera_manager_version}"
                          hadoop:
                            version: "{$.cloudera_hadoop_version}"
                          repository_url: "{$.repository_url}"

              - services-hive:
                  action: chefrun
                  precedingPhases: [ packages-client-hive ]
                  parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "manager" ]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[cloudera::hive]" ]
                      jattrs:
                        java:
                          java_home: "/usr/java/jdk6"
                        cloudera:
                          master:
                            host: "{$.props.vms.Node_Master_DNS}"
                          manager:
                            host: "{$.props.vms.Node_Manager_DNS}"
                            version: "{$.cloudera_manager_version}"
                          datanodes:
                            hosts: "{$.props.vms.DataNodes}"
                          hadoop:
                            version: "{$.cloudera_hadoop_version}"
                          repository_url: "{$.repository_url}" 
            return:
              - Hive_Server:
                  description: "Hive server node"
                  value: "{$.props.vms.Node_Manager}"
              - Hive_Metastore:
                  description: "Hive Metastore node"
                  value: "{$.props.vms.Node_Manager}"                 