application:
  configuration:
    #input.ami: {image: "us-east-1/ami-ee698586", identity: "root"}
    input.ami: "us-west-1/ami-0e073d4b"
    input.identity: "root"
    input.master_hardware: "m3.large"
    input.datanode_hardware: "m3.large"
    input.datanodes_quantity: "5"
    input.cluster_prefix: "CDH"
    input.cookbooks_url: "https://dl.dropboxusercontent.com/u/250836/hadoop.tar.gz"
    input.repository_url: "http://archive.cloudera.com"
    input.cloudera_hadoop_version: "5.1.3"
    input.cloudera_manager_version: "5.1.3"
    #input.cloudera_search_version: "1.3.0"
    #input.cloudera_impala_version: "1.4.0"
    input.metastore_root_password: "hive"
  interfaces:
    input:
      ami: "bind(vms#input.ami)"
      identity: "bind(vms#input.identity, cloudera-manager#input.identity, cloudera-hadoop#input.identity, cloudera-hive#input.identity)"
      master_hardware: "bind(vms#input.master_hardware)"
      datanode_hardware: "bind(vms#input.datanode_hardware)"
      datanodes_quantity: "bind(vms#input.datanodes_quantity)"
      cluster_prefix: "bind(vms#input.cluster_prefix)"
      cookbooks_url: "bind(vms#input.cookbooks_url, cloudera-manager#input.cookbooks_url, cloudera-hadoop#input.cookbooks_url, cloudera-hive#input.cookbooks_url)"
      repository_url: "bind(cloudera-manager#input.repository_url, cloudera-hadoop#input.repository_url, cloudera-hive#input.repository_url)"
      cloudera_manager_version: "bind(cloudera-manager#input.cloudera_manager_version, cloudera-hadoop#input.cloudera_manager_version, cloudera-hive#input.cloudera_manager_version)"
      cloudera_hadoop_version: "bind(cloudera-hadoop#input.cloudera_hadoop_version, cloudera-hive#input.cloudera_hadoop_version)"
      metastore_root_password: "bind(cloudera-hive#input.metastore_root_password)"
    Cloudera:
      Manager_URL: "bind(cloudera-manager#cloudera-manager.Manager_URL)"
      Login: "bind(cloudera-manager#cloudera-manager.Login)"
      Password: "bind(cloudera-manager#cloudera-manager.Password)"
  bindings:
    - [vms, cloudera-manager]
    - [vms, cloudera-hadoop]
    - [vms, cloudera-hive]
    - [cloudera-hadoop, cloudera-manager]
    - [cloudera-hive, cloudera-hadoop]
  components:
    vms:
      type: workflow.Instance
      interfaces:
        input:
          ami: configuration(string)
          identity: configuration(string)
          #  type: configuration(map<string,object>)
          #  suggestions:
          #    east: {image: "us-east-1/ami-ee698586", identity: "root"}
          #    west: {image: "us-west-1/ami-0e073d4b", identity: "root"}
          master_hardware: configuration(string)
          datanode_hardware: configuration(string)
          datanodes_quantity: configuration(string)
          cluster_prefix: configuration(string)
          cookbooks_url: configuration(string)
        result:
          Node_Manager: publish-signal(list<string>)
          Node_Manager_DNS: publish-signal(string)
          Node_Master: publish-signal(list<string>)
          Node_Master_DNS: publish-signal(string)
          DataNodes: publish-signal(list<string>)
          DataNodesDNS: publish-signal(list<string>)
      required: []
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get_env_props:
                  action: getEnvironmentProperties
                  phase: get-env-props
                  output:
                    config: result
              - provision-hadoop-manager:
                  action: .provision-node
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                      roleName: "manager"
                      hardwareId: "{$.master_hardware}"
                      quantity: 1
                  output:
                      managerIp: ips
                      managerDns: dns
              - provision-hadoop-master:
                  action: .provision-node
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                      roleName: "master"
                      hardwareId: "{$.master_hardware}"
                      quantity: 1
                  output:
                      masterIp: ips
                      masterDns: dns
              - provision-datanode:
                  action: .provision-node
                  phase: provision-node
                  precedingPhases: [ get-env-props ]
                  parameters:
                      roleName: "datanode"
                      hardwareId: "{$.datanode_hardware}"
                      quantity: "{$.datanodes_quantity}"
                  output:
                      datanodeIps: ips
                      datanodeDns: dns
              - update-hosts:
                  action: chefrun
                  phase: update-hosts
                  precedingPhases: [ provision-node ]
                  parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "datanode", "manager", "master" ]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[cloudera::hosts_aws]" ]
                      jattrs:
                          base:
                              hosts_aws: [ "{$.masterDns[*]}", "{$.managerDns[*]}", "{$.datanodeDns[*]}" ]
            return:
              - Node_Manager:
                  description: "Manager node IP"
                  value: "{$.managerIp}"
              - Node_Manager_DNS:
                  description: "Manager node DNS"
                  value: "{$.managerDns[*][0]}"
              - Node_Master:
                  description: "Master node IP"
                  value: "{$.masterIp}"
              - Node_Master_DNS:
                  description: "Master node DNS"
                  value: "{$.masterDns[*][0]}"
              - DataNodes:
                  description: "Data nodes IP"
                  value: "{$.datanodeIps}"
              - DataNodesDNS:
                  description: "Data nodes DNS"
                  value: "{$.datanodeDns[*]}"

          .provision-node:
              parameters:
                - roleName:
                    description: Role for the provisioned node
                - hardwareId:
                    description: Hardware id
                - quantity:
                    description: Number of nodes to start
              steps:
                - provision-node:
                    action: provisionAmazonVm
                    phase: provision
                    parameters:
                      roleName: "{$.roleName}"
                      imageId: "{$.ami}"
                      vmIdentity: "{$.identity}"
                      hardwareId: "{$.hardwareId}"
                      quantity: "{$.quantity}"
                      jcloudsNodeNamePrefix: "{$.cluster_prefix}"
                    output:
                      PublicIPs: ips
                - link-folders:
                    action: execrun
                    precedingPhases: [ provision ]
                    parameters:
                      isSudo: true
                      roles: [ "{$.roleName}" ]
                      command:
                          - bash
                          - "-c"
                          - |
                                mkdir -p /srv &&
                                mkdir -p /opt/srv &&
                                mkdir -p /opt/tmp &&
                                chmod -R 777 /opt/srv &&
                                chmod -R 777 /opt/tmp &&
                                mount --bind /opt/tmp /tmp &&
                                mount --bind /opt/srv /srv
                - set-hostname:
                    action: execrun
                    phase: post-provision
                    precedingPhases: [ link-folders ]
                    parameters:
                      isSudo: true
                      roles: [ "{$.roleName}" ]
                      command:
                          - bash
                          - "-c"
                          - |
                                hostname `curl -s http://169.254.169.254/latest/meta-data/public-hostname` &&
                                echo "`hostname -i`   `hostname`" >> /etc/hosts &&
                                hostname
                    output:
                      dns: stdout
                - install-ntp:
                    action: chefrun
                    phase: post-provision
                    precedingPhases: [ link-folders ]
                    parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "{$.roleName}" ]
                      runList: ["recipe[ntp]"]
                      recipeUrl: "{$.cookbooks_url}"
                      jattrs:
                        ntp:
                          servers: ["0.amazon.pool.ntp.org"]
                - install-ephemeral:
                    action: chefrun
                    phase: install-ephemeral
                    precedingPhases: [ post-provision ]
                    parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "{$.roleName}" ]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[cloudera::ephemeral]" ]
                - install-java:
                    action: chefrun
                    precedingPhases: [ install-ephemeral ]
                    parameters:
                      isSudo: true
                      isSolo: true
                      roles: ["{$.roleName}"]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[java]" ]
                      jattrs:
                        java:
                          install_flavor: "oracle"
                          jdk_version: "6"
                          java_home: "/usr/java/jdk6"
                          oracle:
                            accept_oracle_download_terms: "true"
                - install-mysql-client:
                    action: chefrun
                    precedingPhases: [install-java]
                    parameters:
                      isSudo: true
                      isSolo: true
                      roles: [ "{$.roleName}" ]
                      recipeUrl: "{$.cookbooks_url}"
                      runList: [ "recipe[mysql::client]" ]
                - disable-iptables:
                    action: execrun
                    precedingPhases: [ install-java ]
                    parameters:
                      isSudo: true
                      roles: [ "{$.roleName}" ]
                      command:
                          - bash
                          - "-c"
                          - |
                                /etc/init.d/iptables stop
              return:
                ips:
                  value: "{$.PublicIPs}"
                dns:
                  value: "{$.dns}"
    cloudera-manager:
      type: reference.Submodule
      configuration:
        __locator.application-id: "cloudera-manager"
      required: [vms]
      interfaces:
        input:
          identity: configuration(string)
          cookbooks_url: configuration(string)
          repository_url: configuration(string)
          cloudera_manager_version: configuration(string)
        vms:
          Node_Manager: consume-signal(list<string>)
          Node_Manager_DNS: consume-signal(string)
          Node_Master: consume-signal(list<string>)
          Node_Master_DNS: consume-signal(string)
          DataNodes: consume-signal(list<string>)
          DataNodesDNS: consume-signal(list<string>)
        cloudera-manager:
          Manager_URL: publish-signal(list<string>)
          Login: publish-signal(string)
          Password: publish-signal(string)
    cloudera-hadoop:
      type: reference.Submodule
      configuration:
        __locator.application-id: "cloudera-hadoop"
      required: [vms, cloudera-manager]
      interfaces:
        input:
          identity: configuration(string)
          repository_url: configuration(string)
          cookbooks_url: configuration(string)
          cloudera_hadoop_version: configuration(string)
          cloudera_manager_version: configuration(string)
        vms:
          Node_Manager: consume-signal(list<string>)
          Node_Manager_DNS: consume-signal(string)
          Node_Master: consume-signal(list<string>)
          Node_Master_DNS: consume-signal(string)
          DataNodes: consume-signal(list<string>)
          DataNodesDNS: consume-signal(list<string>)
        cloudera-manager:
          Manager_URL: consume-signal(list<string>)
          Login: consume-signal(string)
          Password: consume-signal(string)
        cloudera-hadoop:
          NameNode: publish-signal(list<string>)
          Primary_NameNode: publish-signal(list<string>)
          Secondary_NameNode: publish-signal(list<string>)
          Hbase_Master: publish-signal(list<string>)
          Hbase_MasterDns: publish-signal(string)
          JobTracker: publish-signal(list<string>)
          cloudera_hdfsWebui: publish-signal(list<string>)
          cloudera_jobtrackerWebui: publish-signal(list<string>)
          cloudera_hbaseWebui: publish-signal(list<string>)
    cloudera-hive:
      type: reference.Submodule
      configuration:
        __locator.application-id: "cloudera-hive"
      required: [vms, cloudera-hadoop]
      interfaces:
        input:
          identity: configuration(string)
          repository_url: configuration(string)
          cookbooks_url: configuration(string)
          cloudera_hadoop_version: configuration(string)
          cloudera_manager_version: configuration(string)
          metastore_root_password: configuration(string)
        vms:
          Node_Manager: consume-signal(list<string>)
          Node_Manager_DNS: consume-signal(string)
          Node_Master: consume-signal(list<string>)
          Node_Master_DNS: consume-signal(string)
          DataNodes: consume-signal(list<string>)
          DataNodesDNS: consume-signal(list<string>)
        cloudera-hadoop:
          NameNode: consume-signal(list<string>)
          Primary_NameNode: consume-signal(list<string>)
          Secondary_NameNode: consume-signal(list<string>)
          Hbase_Master: consume-signal(list<string>)
          Hbase_MasterDns: consume-signal(string)
          JobTracker: consume-signal(list<string>)
          cloudera_hdfsWebui: consume-signal(list<string>)
          cloudera_jobtrackerWebui: consume-signal(list<string>)
          cloudera_hbaseWebui: consume-signal(list<string>)
        cloudera-hive:
          Hive_Server: publish-signal(list<string>)
          Hive_Metastore: publish-signal(list<string>)



